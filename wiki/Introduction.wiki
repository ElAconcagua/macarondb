#Présentation du projet MacaronDB 

MacaronDB contient un jeu de classes permettant de simplifier l'exécution de requêtes SQL, et la manipulation des jeux de données renvoyés par ces requêtes.

Par exemple, pour exécuter une requête SQL ne renvoyant qu'une seule ligne, vous pouvez écrire ceci :

$sql = 'select code, description from mytable where code1 = ? and code2 = ?';
$data = $cnx_db01->selectOne ( $sql, array ($value1, $value2 ) );

Dans l'exemple ci-dessus, la variable $data contient un tableau associatif à une dimension contenant les données retournées par SQL (si tout s'est bien passé). En revanche, si la requête n'a pas abouti, la variable $data contiendra le booléen "false".

Pour information, les 2 paramètres de la méthode selectOne() sont la requête SQL à exécuter, et un tableau PHP optionnel contenant les valeurs qui vont se substituer aux points d'interrogation dans la requête SQL. La méthode selectOne() exécute la requête en s'appuyant sur les méthode prepare() et execute() du connecteur base de données sous-jacent.

Il est important de noter que toutes les requêtes exécutées par les méthodes de MacaronDB sont exécutées selon ce principe, qui garantit la meilleure sécurité possible contre les attaques dites par "injection SQL". Je vous déconseille formellement de créer vos requêtes SQL en concaténant les éléments variables de vos clauses WHERE avec le code de la requête. Ce faisant, vous rendriez vos requêtes vulnérables aux attaques "par injection SQL".

Si vous souhaitez récupérer un tableau avec des postes numérotés (plutôt qu'un tableau associatif), alors il vous suffira d'ajouter le booléen "true" en troisième paramètre de la méthode selectOne(). Exemple :

$data = $cnx_db01->selectOne ( $sql, array ($value1, $value2 ), true );

Si votre requête est susceptible de renvoyer de 1 à X lignes, alors c'est la méthode "selectBlock" qu'il vous faut. Exemple :

$sql = 'select code, description from mytable where code1 = ? and code2 = ?';
$data = $cnx_db01->selectBlock ( $sql, array ($value1, $value2 ) );

Dans l'exemple ci-dessus, $data contiendra un tableau associatif à 2 dimensions, si tout s'est bien passé, ou "false" dans le cas contraire.

Si vous souhaitez récupérer un jeu de données sous la forme d'un tableau à deux dimensions, facile à utiliser pour la génération de champs de formulaire de type "select" (liste déroulante), alors vous apprécierez sûrement la méthode selectKeyValuePairs() qui s'utilise de la façon suivante :

$sql = 'select code, description from mytable';
$data = $cnx_db01->selectKeyValuePairs( $sql );



Les différentes méthodes à votre disposition sont les suivantes :

function selectOne($sql, $args = array(), $fetch_mode_num = false);
function selectBlock($sql, $args = array());
function selectKeyValuePairs($sql, $args = array());
function executeCommand($sql, $args = array(), $count_nb_rows = true);
function callProcedure($proc_name, $proc_schema, &$args = array(), $return_resultset = false);
function getStatement($sql, $args = array());
function getFetchAssoc($st);
function getPagination($sql, $args, $offset, $nbl_by_page, $order_by = '');
function getScrollCursor($sql, $args, $offset, $nbl_by_page, $order_by = '' ) ;
function export2CSV($sql, $args = array());
function export2XML($sql, $args = array(), $tag_line = '', $gen_header=true) ;
function export2insertSQL($sql, $args = array());
function getLastInsertId($sequence = '');
function valueIsExisting($table, $nomcol, $valcol, $where_optionnel = '');
function valueIsExistingOnOtherRecord($table, $nomcol, $valcol, $idencours, $where_optionnel = '');
function getInfoDatabase();
function countNbRowsFromTable($table, $schema = '');
function countNbRowsFromSQL($sql, $args = array());

Je reviendrai plus en détail sur ces méthodes, mais il me semble que leurs noms, et leurs paramètres, peuvent d'ores et déjà vous donner quelques indications sur la manière de les utiliser.

Pour pouvoir utiliser cette librairie dans vos projets sans plus attendre, il vous suffit de télécharger et dézipper le répertoire "macaronDB", et de l'installer dans l'un des sous-répertoires de votre projet. Par exemple, vous pouvez utiliser l'arborescence suivante :

/votreprojet/
/votreprojet/inc/
/votreprojet/inc/macaronDB/

A partir de là, vous devez ajouter la librairie "macaronDB" dans la liste des chemins d'accès reconnus par votre projet. Cela peut se faire par l'intermédiaire d'un script de configuration existant déjà dans votre projet, dans lequel vous prendrez soin d'insérer les lignes suivantes :

// si l'on considère que votre script de config se trouve dans /votreprojet/inc/
define('APP_PATH_STD', realpath(dirname(dirname(__FILE__))));
set_include_path('.'
    . PATH_SEPARATOR . APP_PATH_STD 
    . PATH_SEPARATOR . APP_PATH_STD . DIRECTORY_SEPARATOR. 'inc' 
                   .DIRECTORY_SEPARATOR . 'macaronDB'. DIRECTORY_SEPARATOR
    . PATH_SEPARATOR . get_include_path());

require_once 'DBWrapperInterface.php';
require_once 'DBInstanceInterface.php';
require_once 'DBWrapperClassStd.php';
require_once 'DBFactory.php';

AVERTISSEMENT : j'utiliserai dans les lignes suivantes le terme "Zend Server" pour désigner l'environnement d'exécution de PHP, car c'est l'environnement que j'utilise dans les projets d'entreprise sur lesquels je travaille au quotidien. Je vous recommande d'ailleurs de l'utiliser, car il est très complet, facile à installer, et il existe une version gratuite (la version "Community Edition") qui est parfaite pour se "faire la main". Zend Server pour IBM i est le seul stack PHP opérationnel pour cette plateforme. Si vous ne travaillez pas en environnement IBM i, et que vous avez déjà vos habitudes avec un environnement LAMP ou WAMP différent, "macaronDB" fonctionnera très bien, à condition que vous ayiez pris soin d'activer les extensions bases de données que vous souhaiter invoquer dans MacaronDB.